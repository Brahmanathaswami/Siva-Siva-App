script "lib_MobileControls"
--> MetaData
-
license: GPLv3
name: lib_MobileControls
type: library
version: 0.2

/*
This stack has been moved from a frontscript to a library.

The suggestion is to split this into general and more specific libraires - f
or instance lib_MobileScroller and lib_MobileAudio etc ?
*/

######### Mobile Player Controls ############
# libMobileAudioPlayer v1.0 beta
# Brahmanathaswami - copied from Gurudeva.app, code by Jacqueline Landman Gay
# Himalayan Academy 2016

---------------------------------------------------------------------------------------
global gPlayerIsRunning
# needed to allow audio to run freely as user moves to other cards

local sPlayerId, sPlayerRect,sDuration

---------------------------------------------------------------------------------------
-- createMobileAudioPlayer
-- DESCRIPTION
--        
-- PARAMETERS
--		pURL: the ath to the audio file, either http or local
--		pPlayerName: this could be called from any module and the player name will vary
-- Usage: Call this handler to instantiate the player and make it visible
-- If intent is to show when card opens, then call from preopencard handler.
-- if intent is to show dynamically (i.e. default is hidden until the User what to listen to something) then call from the button/or handler using:
-- if intent it is to let audio run while user does other things in the app then
-- set global: something like this  show grp "soundIsPlaying"
--      put 1 into gPlayerIsRunning # use this later when stopping the sound...
-- CHANGES
--         07/20/2016: Brahmanathaswami - updated
--         08/15/2019: BWM - add sPlayerRect, getMobileAudioPlayerRect for responsive use
-------------------------------------------------------------------------------------

-----------------------
# This handler 
-- create the player
-- set it filename: could be a remote/service URL
-- set a busy indicator an remote file
-- BR 2020-03-06 -deprecating the mobilebusy because user has no control

local sPlaying



command createMobileAudioPlayer pURL, pPlayerName, pAudioRect
   log "createMobilePlayer"
   local tHeight,tPlayloc,
   if pPlayerName is among the lines of mobileControls() then
      mobileControlDelete pPlayerName -- init
   end if
   mobileControlCreate "player", pPlayerName
   put the result into sPlayerId
   
   if pAudioRect is empty then
      put the rect of player pPlayerName into pAudioRect
   end if
   
   put pAudioRect into sPlayerRect
   
   mobileControlSet pPlayerName, "visible", false
   mobileControlSet pPlayerName, "rect", sPlayerRect
   mobileControlSet pPlayerName, "filename", pURL 
   
   log pURL
   
   if pURL begins with "https" then
      showBusyIndicator true, "Loading audio..." -- add loading indicator until duration is available
   end if
   
   if mobileIdleTimerLocked() is false then
      mobileLockIdleTimer --jg: disallow screen lock
   end if
end createMobileAudioPlayer 

function getMobileAudioPlayerRect
   return sPlayerRect
end getMobileAudioPlayerRect

-----------------------
# when the player has a property called "duration:
-- It means that we can start it
-- we toggle on our local widget to "pause" 

on playerPropertyAvailable theProperty -- msg sent when enough has content is loaded
   Log "duration available"
   if theProperty is "duration" then
      log "Should be setting closing the loading indicator"
      showBusyIndicator false -- Remove the "Loading..." indicator and start playing
      
      put true into sPlaying
      mobileControlDo sPlayerId, "play"
      send "updateTimer" to me in 20 milliseconds
   end if
   
   set the iconPresetName of widget "PlayPause" of stack "listen" to "pause"
   
end playerPropertyAvailable

on getPlaying pBool
   put pBool into sPlaying
end getPlaying

function setDuration 
   return sDuration
end setDuration

---------------------------------
# here we get the player do play, pause or stop

command setMobileAudioPlayer pPlayerName, pState, pTimeStamp
   showBusyIndicator false -- in case it's still showing
   
   log "setMobileAudioPlayer: " & pState
   --jg: control the state of the mobile player
   -- pState = "pause", "play", or "stop"
   
   mobileControlDo pPlayerName, pState
   
   if pState = "stop" then
      
      mobileControlSet pPlayerName, "showController", false
      mobileControlSet pPlayerName, "visible", false
      mobileControlDelete pPlayerName
      put false into sPlaying
      put empty into sPlayerRect
      if mobileIdleTimerLocked() is true then 
         mobileUnlockIdleTimer
      end if
      get runningAudioIndicatorVis("false")
      
      put false into sPlaying
      updateTimer 
      
      set the iconPresetName of widget "PlayPause" of stack "listen" to "play"
      
   end if
   
   if pState = "pause" then
      # user hit pause
      put mobileControlGet ("currentTime")  into pTimeStamp
      mobileControlDo pPlayerName, "pause"
      put false into sPlaying
      get runningAudioIndicatorVis("true")
      
      put false into sPlaying
      updateTimer
      
      # icon switch to "play"
      set the iconPresetName of widget "PlayPause" of stack "listen" to "play"
      
   end if
   
   if pState = "play" then # could be start from scratch after pausing
      
      if pTimeStamp is empty then
         put 0 into pTimeStamp
      end if
      mobileControlSet pPlayerName, "currentTime", pTimeStamp
      mobileControlDo pPlayerName, "play"
      
      put true into sPlaying
      // Reset duration marker
      set the width of graphic "durationProgress" to 1
      set the left of graphic "durationProgress" to 25
      set the left of graphic "durationMarker" to (the right of graphic "durationProgress" - 7)
      
      put true into sPlaying
      send "updateTimer sPlaying" to me in 20 milliseconds
      
      set the iconPresetName of widget "PlayPause" of stack "listen" to "pause"
      
      get runningAudioIndicatorVis("true")
   end if
   
end setMobileAudioPlayer

on audioSeekBack
   // Seek to the start of the track
   --put the hilitedLine of field "files" into tCurrentIndex
   --put line tCurrentIndex of field "files" into tSoundFile
   -- audioLoadFile tSoundFile
end audioSeekBack

on playerFinished -- sent on mobile when audio is done
   if mobileIdleTimerLocked() is true then mobileUnlockIdleTimer
   mobileControlDelete sPlayerId
   put false into sPlaying
   put empty into sPlayerRect
   
   put false into sPlaying
   
   set the iconPresetName of widget "PlayPause" of stack "listen" to "pause"
   
   get runningAudioIndicatorVis("false")
   
end playerFinished

-------------------------------

--command showPlayer pBool, pPlayerName --jg: handles visibility of both mobile and desktop players
--   -- if audio is playing, player is shown on audio card, hidden elsewhere;
--   -- pBool = boolean
--   if isMobile() then
--      --hide player pPlayerName -- the LC one; never show it
--      mobileControlSet pPlayerName, "showController", pBool
--      mobileControlSet pPlayerName, "visible", pBool
--   else
--      set the vis of player pPlayerName to pBool
--   end if
--end showPlayer

######### Mobile Utilities ############
# we shall call of these handlers as we click on mouseup
# 





command setZeroDurationProgress
   // mobile durationProgress
   set the width of graphic "durationProgress" to 1
   set the left of graphic "durationProgress" to 31
   set the left of graphic "durationMarker" to (the right of graphic "durationProgress" - 7)
   put "0.00" into field "currentTime"
   put "0.00" into field "endTime"
   
end setZeroDurationProgress
   
   local tCurrentTime, tHoursMinutes, sTimeStamp, tDuration,  tWidth,
   
   command updateTimer
   
   // Update the time indicator
   if sPlaying is true then
      
      if there is no  fld "currentTime" of stack "listen" then
         exit updateTimer 
      end if
      
      lock screen
      if isMobile() then
         put mobileControlGet("audioPlayer","currentTime") into tCurrentTime
         put mobileControlGet("audioPlayer","playableDuration") into tDuration
      else
         put the currentTime of player "audioPlayer" of stack "listen" into tCurrentTime
         put the duration of player "audioPlayer" of stack "listen" into tDuration
      end if
      if tCurrentTime > 0 and tDuration > 0 then
         
         // Update the time indicator
         put round((tCurrentTime/tDuration) * 350) into tWidth
         
         put tCurrentTime into sTimeStamp
         
         // Update time fields
         put convertTime(tCurrentTime) into tHoursMinutes
         put convertTime(tDuration) into tDuration
         
         put getCurrentTime() into tHoursMinutes
         
         put tHoursMinutes into fld "currentTime" of stack "listen"
         put tDuration into fld "endTime" of stack "listen"
         
         // Update the time indicator
         set the width of graphic "durationProgress" of stack "listen" to tWidth
         
         --         set the left of graphic "durationProgress" of stack "listen" to 20
         set the left of graphic "durationMarker" of stack "listen" to (the right of graphic "durationProgress" of stack "listen"  - 7)
         
         set the left of graphic "durationProgress" of stack "listen" to the left of graphic "durationBG" of stack "listen"
         --set the left of graphic "durationMarker" of stack "listen" to (the right of graphic "durationProgress" of stack "listen" - 7)
         
      end if
      
      unlock screen
      send "updateTimer" to me in 20 milliseconds
   end if
end updateTimer  

function getCurrentTime 
   return tHoursMinutes
end getCurrentTime

function getTimestamp
   return sTimestamp
end getTimestamp

local tMilliseconds, tHours, tMinutes, tSeconds

function convertTime pMilliseconds
   put pMilliseconds into tMilliseconds
   
   // Hours
   put tMilliseconds div 3600000 into tHours
   subtract (tHours * 3600000) from tMilliseconds
   
   // Minutes
   put tMilliseconds div 60000 into tMinutes
   subtract (tMinutes * 60000) from tMilliseconds
   
   // Seconds
   put tMilliseconds div 1000 into tSeconds
   subtract (tSeconds * 1000) from tMilliseconds
   
   return format("%02s",tHours) & ":" & format("%02s",tMinutes) & ":" & format("%02s",tSeconds)
end convertTime



--command audioLoadFile pSoundFile
--   // Load sound file
--   mobileControlSet "audioPlayer","filename",(specialFolderPath("resources") & "/audio/" & pSoundFile)

--   // Reset duration marker
--   set the width of graphic "durationProgress" to 1
--   set the left of graphic "durationProgress" to 25
--   set the left of graphic "durationMarker" to (the right of graphic "durationProgress" - 7)

--   // Start player
--   set the iconPresetName of widget "PlayPause" to "pause"
--   put true into sPlaying
--   mobileControlDo "audioPlayer","play"  
--   send "updateTimer" to me in 20 milliseconds
--end audioLoadFile 


--command audioPlayPause
--   local tIcon

--   put the iconPresetName of widget "PlayPause" into tIcon

--   if tIcon is "play" then
--      // Update the icon
--      set the iconPresetName of widget "PlayPause" to "pause"

--      // Start the player
--      put true into sPlaying
--      mobileControlDo "audioPlayer","play"   
--      updateTimer   
--   else if tIcon is "pause" then
--      // Update the icon
--      set the iconPresetName of widget "PlayPause" to "play"

--      // Pause the player
--      put false into sPlaying
--      mobileControlDo "audioPlayer","pause"
--   end if
--end audioPlayPause

--on audioSeekForward
--   // Go to next track
--   put the hilitedLine of field "files" into tCurrentIndex
--   if tCurrentIndex = the number of lines in field "files" then
--      // Last track
--      // do nothing
--   else
--      // Select and load next file
--      add 1 to tCurrentIndex
--      set the hilitedLine of field "files" to tCurrentIndex
--      put line tCurrentIndex of field "files" into tSoundFile

--      audioLoadFile tSoundFile
--   end if
--end audioSeekForward

--on playerFinished
--   put false into sPlaying

--   // Play next track
--   put the hilitedLine of field "files" into tCurrentIndex
--   if tCurrentIndex = the number of lines in field "files" then
--      // Last track
--      // do nothing
--   else
--      // Select and load next file
--      add 1 to tCurrentIndex
--      set the hilitedLine of field "files" to tCurrentIndex
--      put line tCurrentIndex of field "files" into tSoundFile

--      audioLoadFile tSoundFile
--   end if
--end playerFinished



on deleteMobileControl pName -- jg: deletes an existing mobile control
   -- native controls should be deleted if possible when no longer needed, as
   -- they are overlaid on the stack and will float over all cards
   if not isMobile() then exit deleteMobileControl
   repeat while pName is among the lines of mobileControls()
      mobileControlDelete pName
   end repeat
   
   put "" into sDuration
end deleteMobileControl

on deleteAllMobileControls -- jg: delete all mobile controls of any type in all stacks
   local tList
   if not isMobile() then exit deleteAllMobileControls
   put mobileControls() into tList
   if not (tList contains "audioPlayer") then # play we terminated
      get runningAudioIndicatorVis("false")
   end if
   repeat for each line l in tList
      # we are keeping the player running as per user requests.
      # you need to use an explicit stop/remove in the UI/UX context
      if l contains "audioPlayer" then
         next repeat
      end if  
      mobileControlDelete l
   end repeat
end deleteAllMobileControls


// Are set

--on preOpenCard
--   local tAudioFolder, tFileList

--   // Load sound files
--   put specialFolderPath("resources") & "/audio" into tAudioFolder
--   put files(tAudioFolder) into tFileList
--   put tFileList into field "files"

--   // Load first file
--   set the hilitedLine of field "files" to 1
--   put line 1 of tFileList into tSoundFile

--   // Reset duration marker
--   set the width of graphic "durationProgress" to 1
--   set the left of graphic "durationProgress" to 25
--   set the left of graphic "durationMarker" to (the right of graphic "durationProgress" - 7)
--   put "0.00" into field "currentTime"
--   put "0.00" into field "endTime"

--   if the environment is "mobile" then
--      // Create player
--      mobileControlCreate "player","audioPlayer"
--      mobileControlSet "audioPlayer","visible",false
--      mobileControlSet "audioPlayer","rect",the rect of graphic "playerArea"

--      // Load sound file
--      mobileControlSet "audioPlayer","filename",(specialFolderPath("resources") & "/audio/" & tSoundFile)
--      set the iconPresetName of widget "PlayPause" to "play"
--   end if
--end preOpenCard


