script "API"

-- on openstack
--    set the loc of this stack to the screenloc --jg: now in loader
-- end openstack

command scaleStackIfNeeded
   if the environment is "development" and (item 4 of the effective working screenRect < 800 )  then
      set the scalefactor of this stack to .75
      set the height of this stack to 736
   end if
end scaleStackIfNeeded

command errorDialog pExecutionError
   if not isMobile() then
      --put pExecutionError
      put item 4 of line 1 of pExecutionError into tBrokenStatement
      put item 2 of line 1 of pExecutionError into tLineNumber
      put line (item 1 of line 1 of pExecutionError) of the scriptExecutionErrors  into tErrorDescription 
      # scriptExecutionErrors  seems to be a global prop in the IDE, no longer the cErrorList custom property of a binary stack
      logError tErrorDescription & ":" && tBrokenStatement && "on line" && tLineNumber
   end if
end errorDialog

private command _goLaunchModule
  logInfo "Loading launch module..."
  --   if the environment is not "development" then
  --      hide this stack
  --   end if
  loadModule getConfiguration("launch_module")
end _goLaunchModule

command goHome
   _goLaunchModule
   --dispatch "relaunch" to card (the current card of the topstack) of the topstack
end goHome

on backKey --jg: for Android; otherwise goes to loader screen  --### jg: not right yet
  -- msg is only sent on mobile
  -- recentcards isn't stable, try this way:
  get the recentcards
  filter it without "*loader.livecode*"
  filter it without the long id of this cd
  if line 1 of it = "" then
    quit
  else
    go (line 1 of it)  --### NEED TO LOAD MODULE
  end if
end backKey

command loadModule pModule
  // find what module file to load
  logInfo "Loading module:" && pModule
  put (getPathToModulesFolder() & pModule & "/" & pModule & ".livecode") into tModuleToLoad
  put (getPathToModulesFolder() & pModule & "/" & pModule & ".json") into tModuleConfigurationFile
  logInfo tModuleToLoad
  
  // check and load configuration
  if there is a file tModuleConfigurationFile then
    get url ("binfile:" & tModuleConfigurationFile)
    loadModuleConfiguration pModule, jsonImport(it)
  end if
  
  // load stack
  put the short name of this stack into tOrigStack --jg: this avoids screen flashes
  go stack tModuleToLoad in a new window
  if tOrigStack <> "loader"  and the filename of stack tOrigStack <> tModuleToLoad then
    close stack tOrigStack --jg: close orig stack after new one is in front
  end if
end loadModule


--> ##### Web Browser API ####### -->
/**
* BR: July 27, moved this from the Hap media viewer stacks to the main API
* HAP Media Viewers Library 
*
* Objective: library stack that provides auxiliary routines and UI for vieweing web pages,
* listening to audio and watching videos.
*
* Its public API may be called from any stack. It will cause a defaultstack change as it takes over the app. 
* Buttons for going "recent card" are provided and an optional  "relaunch" message is sent to the cards when going back
*
* === PUBLIC API ===
*  launchURL <pOrientation>,<pURL>: launches given web page.
*  launchAudio <pURL>, [pOptionalImage]: launches the audio with an optional cover image.
*  launchBook <pFileID>: just a convenience method for launching books, internally it calls launchURL.
*
*
*/

# The browser widget has serious issues with dynamic resizing
# and repositioning. Currently it is not possible to have two cards 
# in the same stack one portrait orientation and then dynamically
# change the size of the stack and resize the browser widget
# a simpler method is to have two different stacks preset for portrait
# or landscape. So we have to pass the orientation to fork to the 
# Correct Stack(s) which are put into use on start up as a lib

command launchURL pOrientation, pURL
  if pOrientation = "" then -- try to determine based on media type
    put getOrientationByType(pURL) into tViewerType
  end if
  if pOrientation="portrait" then
    go card "web viewer" of stack "hapMediaViewerPortraitLib"
  else
    go card "web viewer" of stack "hapMediaViewerLandscapeLib"
  end if
  initializeInterfaceDefaults pOrientation
  set the URL of widget "browser" of this stack to pURL
end launchURL

function getOrientationByType pURL -- return correct orientation for a URL;
  -- called by launchURL and orientationChanged in browser cd of both viewer stacks
  -- Some media is locked to an orientation, some allow any.
  -- This tries to determine the allowed orientation for a media type.
  -- (Add slideshows later to landscape view)
  switch
    case pURL contains "youtube" --  a movie [add slideshow when URL format is known]
      --     case pURL contains "SLIDESHOW"  --### add when format is known
      return "landscape" 
      break
    case pURL contains "PORTRAIT" --### fix this when format is known
      return "portrait"
      break
    default
      return "any" -- allows rotation
  end switch
end getOrientationByType


command initializeInterfaceDefaults pOrientation
  if isMobile() then  -- jg
    set the fullscreenmode of this stack to "showAll" -- better for wider screens
    if pOrientation ="portrait" then
      mobileSetAllowedOrientations "portrait,portrait upside down" -- lock to both portrait orientations
      --       set the width of this stack to 414 -- don't need if using 2 stacks
      --       set the height of this stack to 736
    else
      mobileSetAllowedOrientations "landscape left,landscape right" -- lock to both landscape orientations
      --       set the width of this stack to 736
      --       set the height of this stack to 414
    end if
  end if
end initializeInterfaceDefaults

command launchAudio pURL, pOptionalImage
   // temporarily using launchURL for this one.
  launchURL pURL
end launchAudio


command launchBook pFileID
   get "http://dev.himalayanacademy.com/book/" & pFileID
   launchURL it
end launchBook

function pingServer --jg: UTF8 text file on server should contain only the word "true"
  get url "http://www.himalayanacademy.com/ping.txt"
  return textDecode(it,"UTF8") = "true"
end pingServer


